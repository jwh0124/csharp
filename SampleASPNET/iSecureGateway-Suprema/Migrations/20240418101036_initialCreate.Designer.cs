// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using iSecureGateway_Suprema.Contexts;

#nullable disable

namespace iSecureGateway_Suprema.Migrations
{
    [DbContext(typeof(SupremaContext))]
    [Migration("20240418101036_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("AccessGroup");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessGroupAccessLevel", b =>
                {
                    b.Property<string>("AccessGroupCode")
                        .HasColumnType("text");

                    b.Property<string>("AccessLevelCode")
                        .HasColumnType("text");

                    b.HasKey("AccessGroupCode", "AccessLevelCode");

                    b.HasIndex("AccessLevelCode");

                    b.ToTable("AccessGroupAccessLevels");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessLevel", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("AccessScheduleCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("AccessScheduleCode");

                    b.ToTable("AccessLevel");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessSchedule", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("AccessSchedule");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.Author", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.Post", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.PostAuthor", b =>
                {
                    b.Property<string>("AuthorCode")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AuthorCode", "PostCode");

                    b.HasIndex("PostCode");

                    b.ToTable("PostAuthor");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessGroupAccessLevel", b =>
                {
                    b.HasOne("iSecureGateway_Suprema.Models.AccessGroup", null)
                        .WithMany("AccessGroupAccessLevels")
                        .HasForeignKey("AccessGroupCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSecureGateway_Suprema.Models.AccessLevel", null)
                        .WithMany("AccessGroupAccessLevels")
                        .HasForeignKey("AccessLevelCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessLevel", b =>
                {
                    b.HasOne("iSecureGateway_Suprema.Models.AccessSchedule", "AccessSchedule")
                        .WithMany("AccessLevels")
                        .HasForeignKey("AccessScheduleCode");

                    b.Navigation("AccessSchedule");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.PostAuthor", b =>
                {
                    b.HasOne("iSecureGateway_Suprema.Models.Author", null)
                        .WithMany("PostAuthors")
                        .HasForeignKey("AuthorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iSecureGateway_Suprema.Models.Post", null)
                        .WithMany("PostAuthors")
                        .HasForeignKey("PostCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessGroup", b =>
                {
                    b.Navigation("AccessGroupAccessLevels");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessLevel", b =>
                {
                    b.Navigation("AccessGroupAccessLevels");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.AccessSchedule", b =>
                {
                    b.Navigation("AccessLevels");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.Author", b =>
                {
                    b.Navigation("PostAuthors");
                });

            modelBuilder.Entity("iSecureGateway_Suprema.Models.Post", b =>
                {
                    b.Navigation("PostAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
